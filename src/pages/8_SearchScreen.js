import { useTheme } from "@emotion/react";
import {
  Typography,
  List,
  ListItem,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  Box,
  Divider,
  IconButton,
  TextField,
} from "@mui/material";
import React, { useEffect } from "react";
import { useSelector } from "react-redux";
import SmartphoneRoundedIcon from "@mui/icons-material/SmartphoneRounded";
import BusinessOutlinedIcon from "@mui/icons-material/BusinessOutlined";
import CloseOutlinedIcon from "@mui/icons-material/CloseOutlined";
import { CustomAppBar } from "../Components/MainLayout/AppBar/CustomAppBar";
import SearchComponent from "../Components/SearchComponent";
import { InputAdornment } from "@mui/material";
import SearchIcon from "@mui/icons-material/Search";
import LoadingSpinner from "../Components/Loaders/LoadingSpinner";
import {
  useSearchAllMutation,
  useAddToMyRecentSearchesMutation,
  useGetMyRecentSearchesQuery,
  useDeleteRecentSearchesMutation,
} from "../services/search";
import { SEARCH_INPUT_DELAY } from "../constants";
import { useNavigate } from "react-router-dom";

export const SearchScreen = () => {
  const textContainer = useSelector((state) => state.language.textContainer);

  const pageDictionary = {
    search: textContainer.search,
    placeholder: textContainer.searchForAProductOrACompany,
    oldResults: textContainer.previousSearchResults,
    suggestedResults: "النتائج المقترحة",
    smartphone: textContainer.smartphone,
    company: textContainer.company,
  };

  //RTK Autogenerated hooks
  const {
    isLoading,
    error,
    isFetching,
    data: oldResults,
  } = useGetMyRecentSearchesQuery();
  const [search] = useSearchAllMutation();
  const [addRecentSearch] = useAddToMyRecentSearchesMutation();
  const [deleteRecentSearch] = useDeleteRecentSearchesMutation();

  const [searchQuery, setSearchQuery] = React.useState("");

  const [results, setResults] = React.useState([]);
  const navigate = useNavigate();
  const theme = useTheme();
  //TextField styling
  const params = {
    sx: {
      width: "100",
      input: {
        "&::placeholder": {
          opacity: 1,
          fontWeight: 300,
          fontSize: 16,
        },
      },
    },
    placeholder: textContainer.searchForAProductOrACompany,
    InputProps: {
      // type: "search",
      endAdornment: (
        <InputAdornment position="end">
          <IconButton onClick={() => {}}>
            <SearchIcon htmlColor={theme.palette.searchBar.searchIcon} />
          </IconButton>
        </InputAdornment>
      ),
      style: {
        width: "100%",
        height: "50px",
        ...theme.typography.S16W500C050505,
        alignContent: "center",
        color: theme.palette.textField.inputFieldText,
        background: theme.palette.textField.inputFieldBackground,
        borderRadius: 90,
        border: `0.8px solid ${theme.palette.textField.borderColor} `,
        //
        // borderRadius: TEXT_FIELD_BORDER_RADIUS,
        // border: `${TEXT_FIELD_BORDER_THICKNESS}px solid ${theme.palette.textField.borderColor}`,
      },
    },
  };
  const filterResult = (results, id) => {
    return { ...results.filter((result) => result.id !== id) };
  };
  const renderSearchItems = (title, type, id) => (
    <React.Fragment key={id}>
      <ListItem sx={{ padding: 0, margin: 0, lineHeight: 0 }}>
        <ListItemButton
          onClick={() => {
            // add recent search locally
            setResults([...results, { name: title, type, _id: id }]);

            // add recent search to server
            addRecentSearch({ type, id });
            navigate(`/phone?pid=${id}`);
          }}
        >
          <ListItemIcon>
            {type === "phone" ? (
              <SmartphoneRoundedIcon sx={{ fontSize: 40 }} />
            ) : (
              <BusinessOutlinedIcon sx={{ fontSize: 40 }} />
            )}
          </ListItemIcon>
          <ListItemText
            primaryTypographyProps={{ ...theme.typography.S20W700C050505 }}
            primary={title}
            secondaryTypographyProps={{ ...theme.typography.S18W400C65676B }}
            secondary={
              type === "phone"
                ? pageDictionary.smartphone
                : pageDictionary.company
            }
          />
        </ListItemButton>
        <Divider sx={{ padding: 0, color: theme.palette.divider }} />
      </ListItem>
    </React.Fragment>
  );
  const renderRecentItems = (title, type, id) => (
    <React.Fragment key={id}>
      <ListItem sx={{ padding: 0, margin: 0, lineHeight: 0 }}>
        <ListItemButton
          onClick={() => {
            //Navigate to that phone
            navigate(`/phone?pid=${id}`);
          }}
        >
          <ListItemIcon>
            {type === "phone" ? (
              <SmartphoneRoundedIcon sx={{ fontSize: 40 }} />
            ) : (
              <BusinessOutlinedIcon sx={{ fontSize: 40 }} />
            )}
          </ListItemIcon>
          <ListItemText
            primaryTypographyProps={{ ...theme.typography.S20W700C050505 }}
            primary={title}
            secondaryTypographyProps={{ ...theme.typography.S18W400C65676B }}
            secondary={
              type === "phone"
                ? pageDictionary.smartphone
                : pageDictionary.company
            }
          />
        </ListItemButton>
        <IconButton
          onClick={() => {
            let temp = results;
            temp = temp.filter((result) => result._id !== id);
            setResults(temp);
            deleteRecentSearch({ id: id });

            console.log(oldResults);
          }}
        >
          <CloseOutlinedIcon
            sx={{ fontSize: "20px", color: theme.palette.cancel }}
          />
        </IconButton>
        <Divider sx={{ padding: 0, color: theme.palette.divider }} />
      </ListItem>
    </React.Fragment>
  );

  React.useEffect(() => {
    if (searchQuery === "" && oldResults) setResults(oldResults);
  }, [searchQuery, oldResults]);

  return (
    <CustomAppBar showLabel label={pageDictionary.search} showBackBtn>
      <Box
        sx={{
          display: "flex",
          flexDirection: "column",
          margin: "0px 13px",
        }}
      >
        <TextField
          {...params}
          onChange={async (e) => {
            setSearchQuery(e.target.value);
            try {
              setTimeout(async () => {
                if (e.target.value.trim() !== "") {
                  const { phones, companies } = await search(
                    e.target.value.trim()
                  ).unwrap();
                  setResults([...phones, ...companies]);
                }
              }, SEARCH_INPUT_DELAY);
            } catch (e) {
              console.log(e);
            }
          }}
          // value={searchQuery}
        />
        {isLoading ? (
          <LoadingSpinner />
        ) : error ? (
          <div>{error}</div>
        ) : searchQuery === "" ? (
          <Box sx={{ margin: "16px 12px" }}>
            <Typography variant="S16W500C65676b">
              {pageDictionary.oldResults}
            </Typography>
            <List>
              {results.map((item) =>
                renderRecentItems(item.name, item.type, item._id)
              )}
            </List>
          </Box>
        ) : (
          <Box sx={{ margin: "16px 12px" }}>
            <Typography variant="S16W500C65676b">
              {pageDictionary.suggestedResults}
            </Typography>
            <List>
              {results.map((item) =>
                renderSearchItems(item.name, item.type, item._id)
              )}
            </List>
          </Box>
        )}
      </Box>
    </CustomAppBar>
  );
};
